/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica5;

import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author cristianyeis
 */
public class GUI5 extends javax.swing.JFrame {

    Matriz matrizA;
    Matriz matrizB;
    Matriz matrizC;

    /**
     * Creates new form GUI5
     */
    public GUI5() {
        initComponents();
        btnCalcular.setVisible(false);
        jComboBoxOperaciones.setVisible(false);
        btnGuardarA.setVisible(false);
        btnGuardarB.setVisible(false);
        jLabelExponente.setVisible(false);
        txtExponente.setVisible(false);

        btnReset.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFilasA = new javax.swing.JTextField();
        txtColumnasA = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtFilasB = new javax.swing.JTextField();
        txtColumnasB = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblFilasC = new javax.swing.JLabel();
        lblColumnasC = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jComboBoxOperaciones = new javax.swing.JComboBox<>();
        btnCalcular = new javax.swing.JButton();
        btnCrearA = new javax.swing.JButton();
        btnCrearB = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableA = new javax.swing.JTable();
        btnReset = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableB = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableC = new javax.swing.JTable();
        btnGuardarA = new javax.swing.JButton();
        btnGuardarB = new javax.swing.JButton();
        txtExponente = new javax.swing.JTextField();
        jLabelExponente = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setText("Matriz A");

        jLabel2.setText("# Filas de A");

        jLabel3.setText("# Columnas de A");

        jLabel4.setText("# Columnas de B");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel5.setText("Matriz B");

        jLabel6.setText("# Filas de B");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel7.setText("MATRIZ RESULTADO:");

        jLabel8.setText("# Filas de C = ");

        jLabel9.setText("# Columnas de C = ");

        lblFilasC.setText("0");

        lblColumnasC.setText("0");

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel10.setText("Operaciones:");

        jComboBoxOperaciones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A+B", "A-B", "A*B", "AxB", "A(traspuesta)", "B(traspuesta)", "A^n", "B^n" }));

        btnCalcular.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        btnCalcular.setText("Calcular");
        btnCalcular.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCalcularMouseClicked(evt);
            }
        });

        btnCrearA.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnCrearA.setText("crear A");
        btnCrearA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCrearAMouseClicked(evt);
            }
        });

        btnCrearB.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnCrearB.setText("crear B");
        btnCrearB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCrearBMouseClicked(evt);
            }
        });

        jTableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTableA);

        btnReset.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        btnReset.setText("Reiniciar");
        btnReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnResetMouseClicked(evt);
            }
        });

        jTableB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(jTableB);

        jTableC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane6.setViewportView(jTableC);

        btnGuardarA.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnGuardarA.setText("Guardar Matriz A");
        btnGuardarA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGuardarAMouseClicked(evt);
            }
        });

        btnGuardarB.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnGuardarB.setText("Guardar Matriz B");
        btnGuardarB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGuardarBMouseClicked(evt);
            }
        });

        jLabelExponente.setText("Potencia a Elevar Matriz [X]^(n)");

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel11.setText("OPERACIONES MATRICES");

        jLabel12.setText("Matrices de elementos enteros positvos");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnGuardarA)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel1))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtFilasA, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtColumnasA, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnCrearA)))
                                .addGap(6, 6, 6)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(jLabel10))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtExponente, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(77, 77, 77))
                                    .addComponent(jLabelExponente)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jComboBoxOperaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(25, 25, 25))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnCalcular, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(30, 30, 30))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(563, 563, 563)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(btnGuardarB))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(53, 53, 53)
                                    .addComponent(jLabel5))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel4))
                                    .addGap(26, 26, 26)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(txtColumnasB, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(btnCrearB))
                                        .addComponent(txtFilasB, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(41, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(311, 311, 311)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnReset)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel9))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblFilasC, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblColumnasC, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel7))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtFilasA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtColumnasA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(btnCrearA))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBoxOperaciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelExponente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtExponente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCalcular, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(20, 20, 20)
                        .addComponent(btnGuardarA)
                        .addGap(46, 46, 46))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel12)
                        .addGap(8, 8, 8)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtFilasB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtColumnasB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(btnCrearB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGuardarB)
                        .addGap(47, 47, 47)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(lblFilasC, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9)
                            .addComponent(lblColumnasC, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // crear matriz A e imprimir en jTableA
    private void btnCrearAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCrearAMouseClicked

        btnGuardarA.setVisible(true);

        jComboBoxOperaciones.setVisible(true);
        btnReset.setVisible(true);

        if ((txtFilasA.getText().equals("") || !esNumero(txtFilasA.getText()) || txtColumnasA.getText().equals("") || !esNumero(txtColumnasA.getText()))) {
            JOptionPane.showMessageDialog(null, "SEÑOR USUARIO, DEBE INGRESAR UN VALOR NUMERICO EN #FILAS Y #COLUMNAS ANTES DE INICIAR");
            this.txtFilasA.setText(String.valueOf(""));
            this.txtColumnasA.setText(String.valueOf(""));
        } else {
            int input = JOptionPane.showConfirmDialog(this, "DESEA QUE LA MATRIZ A SEA ALEATORIA?");
            switch (input) {
                case JOptionPane.YES_OPTION:
//                JOptionPane.showMessageDialog(null, "Si");
                    crearTablaA(Integer.parseInt(txtFilasA.getText()), Integer.parseInt(txtColumnasA.getText())); // SE DEBE LLENAR LA MATRIZ CON # ALEATORIOS
                    btnCalcular.setVisible(true);
                    break;
                case JOptionPane.NO_OPTION:
//                JOptionPane.showMessageDialog(null, "No");
                    crearTablaAconZeros(Integer.parseInt(txtFilasA.getText()), Integer.parseInt(txtColumnasA.getText())); // SE DEBE LLENAR LA MATRIZ CON # INGRESADOS POR EL USUARIO
                    btnCalcular.setVisible(false);
                    break;
                default:
//                JOptionPane.showMessageDialog(null, "Cancelada"
            }
        }
    }//GEN-LAST:event_btnCrearAMouseClicked

    // crear matriz B e imprimir en jTableB
    private void btnCrearBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCrearBMouseClicked

        btnGuardarB.setVisible(true);
        jComboBoxOperaciones.setVisible(true);
        btnReset.setVisible(true);

        if ((txtFilasB.getText().equals("") || !esNumero(txtFilasB.getText()) || txtColumnasB.getText().equals("") || !esNumero(txtColumnasB.getText()))) {
            JOptionPane.showMessageDialog(null, "SEÑOR USUARIO, DEBE INGRESAR UN VALOR NUMERICO EN #FILAS Y #COLUMNAS ANTES DE INICIAR");
            this.txtFilasB.setText(String.valueOf(""));
            this.txtColumnasB.setText(String.valueOf(""));
        } else {
            int input = JOptionPane.showConfirmDialog(this, "DESEA QUE LA MATRIZ B SEA ALEATORIA?");
            switch (input) {
                case JOptionPane.YES_OPTION:
//                JOptionPane.showMessageDialog(null, "Si");
                    crearTablaB(Integer.parseInt(txtFilasB.getText()), Integer.parseInt(txtColumnasB.getText())); // SE DEBE LLENAR LA MATRIZ CON # ALEATORIOS
                    btnCalcular.setVisible(true);
                    break;
                case JOptionPane.NO_OPTION:
//                JOptionPane.showMessageDialog(null, "No");
                    crearTablaBconZeros(Integer.parseInt(txtFilasB.getText()), Integer.parseInt(txtColumnasB.getText())); // SE DEBE LLENAR LA MATRIZ CON # INGRESADOS POR EL USUARIO
                    btnCalcular.setVisible(false);
                    break;
                default:
//                JOptionPane.showMessageDialog(null, "Cancelada"
            }
        }
    }//GEN-LAST:event_btnCrearBMouseClicked


    private void btnCalcularMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCalcularMouseClicked
        
        int filasA = matrizA.getCantidadFilas();
        int columnasA = matrizA.getCantidadColumnas();
        int filasB = matrizB.getCantidadFilas();
        int columnasB = matrizB.getCantidadColumnas();
        sincronizarTablaA();
        sincronizarTablaB();
//        DefaultTableModel modelA = (DefaultTableModel) jTableA.getModel();
        try {
            String operacion = String.valueOf(jComboBoxOperaciones.getSelectedItem());

            if (operacion.equals("A+B")) {
                if((matrizA==null) || (matrizB==null)){                   
                    JOptionPane.showMessageDialog(null, "SEÑOR USUARIO, DEBE INGRESAR AMBAS MATRICES PARA PODER REALIZAR ESTA OPERACION");
                }else{
                    if (filasA != filasB || columnasA != columnasB) {
                        JOptionPane.showMessageDialog(null, "SEÑOR USUARIO, LAS MATRICES DEBEN SER DEL MISMO ORDEN PARA PODER SUMARLAS");
                    }
                    matrizC = Matriz.sumar(matrizA, matrizB);
                }
                

            } else if (operacion.equals("A-B")) {
                if (filasA != filasB || columnasA != columnasB) {
                    JOptionPane.showMessageDialog(null, "SEÑOR USUARIO, LAS MATRICES DEBEN SER DEL MISMO ORDEN PARA PODER RESTARLAS");
                }
                matrizC = Matriz.restar(matrizA, matrizB);
            } else if (operacion.equals("A*B")) {
                if (filasA != filasB || columnasA != columnasB) {
                    JOptionPane.showMessageDialog(null, "SEÑOR USUARIO, LAS MATRICES DEBEN SER DEL MISMO ORDEN PARA PODER MULTIPLICAR LOS ELEMENTOS");
                }
                matrizC = Matriz.multiplicacionPunto(matrizA, matrizB);
            } else if (operacion.equals("AxB")) {
                if (filasA != filasB || columnasA != columnasB) {
                    JOptionPane.showMessageDialog(null, "SEÑOR USUARIO, EL #COLUMNAS DE LA MATRIZ 'A' DEBE SER IGUAL AL #FILAS DE LA MATRIZ 'B' PARA PODER MULTIPLICARLAS MATRICIALMENTE");
                }
                matrizC = Matriz.multiplicacionMatricial(matrizA, matrizB);
            } else if (operacion.equals("A(traspuesta)")) {
                matrizC = Matriz.traspuesta(matrizA);
            } else if (operacion.equals("B(traspuesta)")) {
                matrizC = Matriz.traspuesta(matrizB);
            } else if (operacion.equals("A^n")) {
                jLabelExponente.setVisible(true);
                txtExponente.setVisible(true);
                if ((txtExponente.getText().equals("") || !esNumero(txtExponente.getText()))) {
                    JOptionPane.showMessageDialog(null, "SEÑOR USUARIO, DEBE INGRESAR UN VALOR NUMERICO EN LA POTENCIA PARA PODER OPERAR LA MATRIZ");
                    this.txtExponente.setText(String.valueOf(""));
                }
                int exponente = Integer.parseInt((txtExponente.getText()));
                matrizC = Matriz.Potencia(matrizA, exponente);
            } else if (operacion.equals("B^n")) {
                jLabelExponente.setVisible(true);
                txtExponente.setVisible(true);
                if ((txtExponente.getText().equals("") || !esNumero(txtExponente.getText()))) {
                    JOptionPane.showMessageDialog(null, "SEÑOR USUARIO, DEBE INGRESAR UN VALOR NUMERICO EN LA POTENCIA PARA PODER OPERAR LA MATRIZ");
                    this.txtExponente.setText(String.valueOf(""));
                }
                int exponente = Integer.parseInt((txtExponente.getText()));
                matrizC = Matriz.Potencia(matrizB, exponente);
            }
            sincronizarTablaC();
            lblFilasC.setText(String.valueOf(matrizC.getCantidadFilas()));
            lblColumnasC.setText(String.valueOf(matrizC.getCantidadColumnas()));
        } catch (Exception ex) {
            System.out.println(String.format("error creando matriz C: %s", ex.getMessage()));
        }


    }//GEN-LAST:event_btnCalcularMouseClicked


    private void btnGuardarAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGuardarAMouseClicked

        sincronizarTablaA();
        btnCalcular.setVisible(true);

    }//GEN-LAST:event_btnGuardarAMouseClicked

    private void btnGuardarBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGuardarBMouseClicked

        sincronizarTablaB();
        btnCalcular.setVisible(true);

    }//GEN-LAST:event_btnGuardarBMouseClicked

    private void btnResetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseClicked

        matrizA = null;
        matrizB = null;
        matrizC = null;

        DefaultTableModel modelA = (DefaultTableModel) jTableA.getModel();
        modelA.getDataVector().removeAllElements();

        DefaultTableModel modelB = (DefaultTableModel) jTableB.getModel();
        modelB.getDataVector().removeAllElements();

        DefaultTableModel modelC = (DefaultTableModel) jTableC.getModel();
        modelC.getDataVector().removeAllElements();

        jTableA.repaint();
        jTableB.repaint();
        jTableC.repaint();

        btnCalcular.setVisible(false);
        jComboBoxOperaciones.setVisible(false);
        btnGuardarA.setVisible(false);
        btnGuardarB.setVisible(false);
        jLabelExponente.setVisible(false);
        txtExponente.setVisible(false);

        lblFilasC.setText(String.valueOf(""));
        lblColumnasC.setText(String.valueOf(""));

    }//GEN-LAST:event_btnResetMouseClicked

    private void crearTablaA(int filas, int columnas) {
        try {
            matrizA = new Matriz(filas, columnas);
            int filasA = matrizA.getCantidadFilas();
            int columnasA = matrizA.getCantidadColumnas();
            Random aleatorio = new Random();
            DefaultTableModel modelA = (DefaultTableModel) jTableA.getModel();
            modelA.getDataVector().removeAllElements();
            modelA.setRowCount(filasA);
            modelA.setColumnCount(columnasA);

            for (int f = 0; f < filasA; f++) {
                for (int c = 0; c < columnasA; c++) {
                    int valor = aleatorio.nextInt(100);
                    matrizA.setElemento(f, c, valor);
                    jTableA.setValueAt(valor, f, c);
                }
            }
            jTableA.setEnabled(false);
        } catch (Exception ex) {
            System.out.println(String.format("error creando matriz A: %s", ex.getMessage()));
        }
    }

    // si se usa este metodo, llamar despues sincronizarTablaA
    private void crearTablaAconZeros(int filas, int columnas) {
        try {
            matrizA = new Matriz(filas, columnas); // Declaro una matrizA de la clase Matriz
            int filasA = matrizA.getCantidadFilas(); // Obtengo el atributo filas de la clase Matriz
            int columnasA = matrizA.getCantidadColumnas(); // Obtengo el atributo columnas de la clase Matriz

            DefaultTableModel modelA = (DefaultTableModel) jTableA.getModel();

            modelA.getDataVector().removeAllElements();
            modelA.setRowCount(filasA);
            modelA.setColumnCount(columnasA);

            for (int f = 0; f < filasA; f++) {
                for (int c = 0; c < columnasA; c++) {
                    int valor = 0;
                    matrizA.setElemento(f, c, valor);
                    jTableA.setValueAt(valor, f, c);
                }
            }
            jTableA.setEnabled(true);
        } catch (Exception ex) {
            System.out.println(String.format("error creando matriz A: %s", ex.getMessage())); // QUE HACE ESTO?????????
        }
    }

    private void crearTablaB(int filas, int columnas) {
        try {
            matrizB = new Matriz(filas, columnas);
            int filasB = matrizB.getCantidadFilas();
            int columnasB = matrizB.getCantidadColumnas();
            Random aleatorio = new Random();
            DefaultTableModel modelB = (DefaultTableModel) jTableB.getModel();
            modelB.getDataVector().removeAllElements();
            modelB.setRowCount(filasB);
            modelB.setColumnCount(columnasB);

            for (int f = 0; f < filasB; f++) {
                for (int c = 0; c < columnasB; c++) {
                    int valor = aleatorio.nextInt(100); // SE GENERA VALOR ALEATORIO ENTRE 0-100
                    matrizB.setElemento(f, c, valor);
                    jTableB.setValueAt(valor, f, c); // SE PINTA LA MATRIZ A EN LA JTABLEB
                }
            }
            jTableB.setEnabled(false);
        } catch (Exception ex) {
            System.out.println(String.format("error creando matriz B: %s", ex.getMessage()));
        }
    }

    // si se usa este metodo, llamar despues sincronizarTablaB
    private void crearTablaBconZeros(int filas, int columnas) {
        try {
            matrizB = new Matriz(filas, columnas); // Declaro una matrizA de la clase Matriz
            int filasB = matrizB.getCantidadFilas(); // Obtengo el atributo filas de la clase Matriz
            int columnasB = matrizB.getCantidadColumnas(); // Obtengo el atributo columnas de la clase Matriz

            DefaultTableModel modelB = (DefaultTableModel) jTableB.getModel();

            modelB.getDataVector().removeAllElements();
            modelB.setRowCount(filasB);
            modelB.setColumnCount(columnasB);

            for (int f = 0; f < filasB; f++) {
                for (int c = 0; c < columnasB; c++) {
                    int valor = 0;
                    matrizB.setElemento(f, c, valor);
                    jTableB.setValueAt(valor, f, c);
                }
            }
            jTableB.setEnabled(true);
        } catch (Exception ex) {
            System.out.println(String.format("error creando matriz B: %s", ex.getMessage()));
        }
    }

    private void sincronizarTablaA() {
        try {
            int filasA = matrizA.getCantidadFilas();
            int columnasA = matrizA.getCantidadColumnas();
            DefaultTableModel modelA = (DefaultTableModel) jTableA.getModel();

            for (int f = 0; f < filasA; f++) {
                for (int c = 0; c < columnasA; c++) {
                    int valor = Integer.parseInt((String) jTableA.getValueAt(f, c));
                    matrizA.setElemento(f, c, valor);
                }
            }
            jTableA.setEnabled(false);
        } catch (Exception ex) {
            System.out.println(String.format("error actualizando matriz A: %s", ex.getMessage()));
        }
    }

    private void sincronizarTablaB() {
        try {
            int filasB = matrizB.getCantidadFilas();
            int columnasB = matrizB.getCantidadColumnas();
            DefaultTableModel modelB = (DefaultTableModel) jTableB.getModel();

            for (int f = 0; f < filasB; f++) {
                for (int c = 0; c < columnasB; c++) {
                    int valor = Integer.parseInt((String) jTableB.getValueAt(f, c));
                    matrizB.setElemento(f, c, valor);
                }
            }
            jTableB.setEnabled(false);
        } catch (Exception ex) {
            System.out.println(String.format("error actualizando matriz B: %s", ex.getMessage()));
        }
    }

    // creo que hay que cambiar este metodo porque no esta imprimiendo la tabla
    private void sincronizarTablaC() {
        try {
            int filasC = matrizC.getCantidadFilas();
            int columnasC = matrizC.getCantidadColumnas();
            DefaultTableModel modelC = (DefaultTableModel) jTableC.getModel();
            modelC.setRowCount(filasC);
            modelC.setColumnCount(columnasC);
            for (int f = 0; f < filasC; f++) {
                for (int c = 0; c < columnasC; c++) {
                    int valor = matrizC.getElemento(f, c);
                    jTableC.setValueAt(valor, f, c);
                }
            }
            jTableB.setEnabled(false);
        } catch (Exception ex) {
            System.out.println(String.format("error actualizando matriz B: %s", ex.getMessage()));
        }
    }

    public boolean esNumero(String numero) {
        for (int i = 0; i < numero.length(); i++) {
            if (!Character.isDigit(numero.charAt(i))) {
                return false;
            }
        }
        return true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI5().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalcular;
    private javax.swing.JButton btnCrearA;
    private javax.swing.JButton btnCrearB;
    private javax.swing.JButton btnGuardarA;
    private javax.swing.JButton btnGuardarB;
    private javax.swing.JButton btnReset;
    private javax.swing.JComboBox<String> jComboBoxOperaciones;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelExponente;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTableA;
    private javax.swing.JTable jTableB;
    private javax.swing.JTable jTableC;
    private javax.swing.JLabel lblColumnasC;
    private javax.swing.JLabel lblFilasC;
    private javax.swing.JTextField txtColumnasA;
    private javax.swing.JTextField txtColumnasB;
    private javax.swing.JTextField txtExponente;
    private javax.swing.JTextField txtFilasA;
    private javax.swing.JTextField txtFilasB;
    // End of variables declaration//GEN-END:variables
}
